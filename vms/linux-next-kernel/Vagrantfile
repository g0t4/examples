# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|

  config.vm.box = "test-ubuntu2410-arm"

  config.vm.box_check_update = false

  config.vm.provider "parallels" do |prl|
    prl.cpus = 10
    prl.memory = 32768
    prl.linked_clone = false # so I can expand drive size manually, else if a linked clone it seems like there is no way to ever expand drive?!

    # TODO: does disk mgmt work with parallels plugin
    # https://github.com/hashicorp/vagrant/pull/11165

    # steps
    # boot VM for first time to create non linked_clone VM
    # vagrant halt => manually expand drive size in parallels GUI
    # vagrant up
    # vagrant ssh
    #
    # lsblk # confirm drive is larger
    # sda                         8:0    0  170G  0 disk
    # ├─sda1                      8:1    0    1G  0 part /boot/efi
    # ├─sda2                      8:2    0    2G  0 part /boot
    # └─sda3                      8:3    0   36G  0 part
    #   └─ubuntu--vg-ubuntu--lv 252:0    0   18G  0 lvm  /
    # sudo lvdisplay
    #   LV Name                ubuntu-lv
    #   LV Size                18.00 GiB
    #
    # 1. resize partition
    # lsblk # confirm
    # sudo parted /dev/sda resizepart 3 100%
    # # Information: You may need to update /etc/fstab. # from resizepart cmd
    # dmsetup info -C   # get current UUID of LV
    # cat /etc/fstab # confirm if UUID in /etc/fstab still matches (it does == good to go)

    # 2. resize PV (b/c using LVM) (= Physical Volume)
    # pvdisplay # confirm
    # sudo pvresize /dev/sda3

    # 3. resize LV (= Logical Volume)
    # lvdisplay # confirm
    # sudo lvextend -l +100%FREE /dev/ubuntu-vg/ubuntu-lv

    # 4. resize filesystem
    # df -h # confirm
    # sudo resize2fs /dev/ubuntu-vg/ubuntu-lv

    # tools
    # sudo apt install -y bat icdiff tree

    # build kernel
    # sudo apt install -y build-essential libncurses-dev bison flex libssl-dev libelf-dev
    # # tag: https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git/tag/?h=next-20240830
    #       (as of 2024-08-31 => IIUC linux-next is 6.12, cuz 6.11 is in RCs)
    #   wget https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git/snapshot/linux-next-next-20240830.tar.gz
    # tar xf linux-next-next-20240830.tar.gz -C ~/
    # make menuconfig
    #   Set DRM_PANIC and DRM_PANIC_DEBUG # try to get these to work (new in 6.10)
    #     *** TODO can I just mod the .config myself to save time and make it reproducible or does it add any depenencies too?
    #     LATER see my notes in linux-next clone for other options to try
    #
    #     FYIk, b/c based on debian config in current VM, need to disable some certs in the .config file:
    #        CONFIG_SYSTEM_TRUSTED_KEYS=""
    #        CONFIG_SYSTEM_REVOCATION_KEYS=""
    #        # untested (look ok)
    #           sed -i 's/^CONFIG_SYSTEM_TRUSTED_KEYS=.*/CONFIG_SYSTEM_TRUSTED_KEYS=""/' .config
    #           sed -i 's/^CONFIG_SYSTEM_REVOCATION_KEYS=.*/CONFIG_SYSTEM_REVOCATION_KEYS=""/' .config
    #
    # make -j$(nproc) # worked!
    #
    # sudo make modules_install
    #
    # sudo make install
    # # FAILS: # ERROR (dkms apport): binary package for parallels-tools: 19.4.0.54962 not found
    #     trying to recompile the kernel module parallel-tools and its not working?
    # dkms status
    #   parallels-tools/19.4.0.54962, 6.8.0-31-generic, aarch64: installed
    # found files:
    #   cat /usr/src/parallels-tools-19.4.0.54962/dkms.conf
    #   ALSO    ls /var/lib/dkms/parallels-tools
    # so is it just not finding the compiled version or? can I skip it?
    # DERP wes the error mentioned:
    #   cat /var/lib/dkms/parallels-tools/19.4.0.54962/build/make.log
    #     ERROR in file during compile... hence why it cannot find the binary!:
    #      /var/lib/dkms/parallels-tools/19.4.0.54962/build/prl_fs/SharedFolders/Guest/Linux/prl_fs/inode.c:874:17: error: implicit declaration of function ‘SetPageError’; did you mean ‘SetPageDirty’? [-Wimplicit-function-declaration]
    #      874 |                 SetPageError(page);
    #   OK IT FAILED TO recompile dkms... can I just skip it?
    #
    # *** try w/o this module, and for now I am removing it from all KERNELS in dkms
    #     sudo dkms remove -m parallels-tools -v 19.4.0.54962 --all
    #     sudo dkms status # confirm nothing now
    #  *** make install # WORKED!
    # ls /boot
    #      vmlinux-6.11.0-rc5-next-20240830    # ok so its marked rc5-next ==? 6.12
    #         it has the flags I want for DRM_PANIC so i'm fine with it so far, must be 6.12 and not marked that way yet? not gonna be a 6.11 rc6 prep right? I don't think that has its own git tree?!
    #
    # upon inspection grub has new menuentry for kernel
    #   sudo cat /boot/grub/grub.cfg
    # SO, set grub to wait 10 seconds so I can select it one off:
    #   sudo sed -i 's/^GRUB_TIMEOUT=.*/GRUB_TIMEOUT=10/' /etc/default/grub
    #   sudo update-grub
    # OPEN PARALLELS GUI to current machine
    #   sudo reboot # OR better yet send reboot from parallels GUI and make sure the window (GUI) is focused so keys work
    #   once it reboots, hit ESC (one time) and grub will show shortly after, pick new kernel... if it works can update grub to use it by default!!!
    #
    # uname -a # verify kernel :)
    #
    # OF COURSE I SHOULD'VE verified if parallels can integrate with DRM... and IIUC no it doesn't so I can't ever see this panic screen? and no QR codes (le sigh)
    #
    # FYI testing a panic:
    # https://www.phoronix.com/news/Nouveau-DRM-Panic-Patches
    #     echo c | sudo tee /proc/sysrq-trigger  # locks up of course in parallels and nothing else

    # FYI testing panic in qemu+virsh:
    #   ssh'd in and ran `echo c | sudo tee /proc/sysrq-trigger'
    #     via `virsh console u2410` I got the dump of linux Kernel panic in the console logs
    #     obviously, nothing via vnc/ssh b/c the kernel is dead
    #   supposedly `echo 1 > /sys/kernel/debug/dri/0/drm_panic_plane_0` should work b/c of DRM_PANIC_DEBUG kernel option
    #     sudo ls /sys/kernel/debug/dri/0  # this time I actually see /0 whereas it was always /1 before
    #

    # digging into SimpleDRM (one of the drivers that supports this new blue screen DRM_PANIC)
    #     CONFIG_DRM_SIMPLEDRM=y   # confirm is enabled in kernel options for my new compiled kernel
    #     sudo dmesg | grep drm # on qemu+virsh => shows bochs-drm
    #       # my desktop tower (w/ ubuntu 24.04) starts w/ simpledrm
    #          => then switches to noveau drm later (nvidia gpu)
    #
    #   sudo apt install -y drm-info
    #
    # forcing virsh+qemu to use simpledrm:
    #
    #    qemu-system-aarch64 --device help  # look at diplay devices and try them out and see if any use simpledrm?
    #       <model type='virtio' vram='32768' /> # fb0: virtio_gpudrmfb frame buffer device
    #       <model type='vga' vram='16384' heads='1' primary='yes'/>  # bochs-drm fb
    #       ati-vga # fails on virsh define
    #       ramfb   # *** OMG simpledrm and `ls /sys/kernel/debug/dri/0` shows drm_panic_plane_0!!!
    #             VNC in!!!!!! (virsh console - does not show it b/c its VT Console)
    #                 FUCK YES IT SHOWS THE KERNEL PANIC SCREEN!!!
    #           FYI I DID NOT NEED to modify cmd line:  GRUB_CMDLINE_LINUX="video=simpledrm" ... ramfb is using simpledrm by default
    #              FYI dmesg shows:     [    0.512943] simple-framebuffer simple-framebuffer.0: [drm] Registered 1 planes with drm panic
    #                  another way to confirm sipmledrm + panic screen is gonna work


    # build13 rebooted into new kernel!
    #   forcing it to use simpledrm
    #   sudo vim /etc/default/grub
    #     GRUB_CMDLINE_LINUX="video=simpledrm modprobe.blacklist=nouveau"
    #        # video=simpledrm alone didn't do it so i blacklisted nouveau...
    #           # ??? might mean I don't need video=simpledrm (b/c simpledrm already used before nouveau is loaded)
    #     sudo update-grub
    #     sudo reboot
    #     sudo dmesg | grep drm # shows simpledrm initialized (good deal)
    #     sudo drm_info # shows simpledrm used!
    #     tree /dev/dri/
    # /dev/dri/
    # ├── by-path
    # │   └── pci-0000:03:00.0-platform-simple-framebuffer.0-card -> ../card0
    # └── card0
    # lspci shows 03:00 is nvidia gpu
    #
    # sudo su
    #    ls /sys/kernel/debug/dri/0   # finally!!! shows drm_panic_plane_0 # may work!
    #   echo 1 > /sys/kernel/debug/dri/0/drm_panic_plane_0   # WORKED!!!
    #   echo 0 > /sys/kernel/debug/dri/0/drm_panic_plane_0   # can reset it and use system (not a real panic,  just seems to draw to the screen as if it were real... )
    #
    #   echo c > /proc/sysrq-trigger  # real panic, shows diff reason on panic screen! (obvi not recoverable)
    #

    # OTHER NOTES (from linux-next clone)
    #
    ## *** FYI articles about new DRM PANIC SCREEN
    # https://www.phoronix.com/news/Linux-6.10-DRM-Panic-Handler
    # https://www.phoronix.com/news/Linux-DRM-Panic-QR-Codes
    # https://www.phoronix.com/news/Linux-6.12-DRM-Panic-QR-Code
    #
    ##

    # COMPILING failure early on certs:
    # failure1:
    #   make[3]: *** No rule to make target 'debian/canonical-certs.pem', needed by 'certs/x509_certificate_list'.  Stop.
    #   *** OK FOUND FIX:
    #     CONFIG_SYSTEM_TRUSTED_KEYS = ""
    #     https://wiki.debian.org/BuildADebianKernelPackage
    #     when you use the stock /boot/config-$(uname -r) file, you need to mod this line to blank (above)
    #       SOF post also talking about this: https://stackoverflow.com/questions/67670169/compiling-kernel-gives-error-no-rule-to-make-target-debian-certs-debian-uefi-ce
    #
    #  │ Symbol: SYSTEM_TRUSTED_KEYS [=debian/canonical-certs.pem]                                                                    │
    #  │ Type  : string                                                                                                               │
    #  │ Defined at certs/Kconfig:58                                                                                                  │
    #  │   Prompt: Additional X.509 keys for default system keyring                                                                   │
    #  │   Depends on: CRYPTO [=y] && SYSTEM_TRUSTED_KEYRING [=y]                                                                     │
    #  │   Location:                                                                                                                  │
    #  │     -> Cryptographic API (CRYPTO [=y])                                                                                       │
    #  │       -> Certificates for signature checking                                                                                 │
    #  │         -> Provide system-wide ring of trusted keys (SYSTEM_TRUSTED_KEYRING [=y])                                            │
    #  │ (2)       -> Additional X.509 keys for default system keyring (SYSTEM_TRUSTED_KEYS [=debian/canonical-certs.pem])            │
    #

    # *** pay attention to "Depends on:" => QR_CODE requires RUST
    # /panic =>
    #
    # *** I SET THESE in menuconfig on first pass:
    #   DRM_PANIC
    #   DRM_PANIC_DEBUG
    #      Prompt: Add a debug fs entry to trigger drm_panic
    #
    # *** later for fun:
    #   DRM_PANIC_BACKGROUND_COLOR
    #   DRM_PANIC_FOREGROUND_COLOR
    #   DRM_PANIC_SCREEN # formatter?
    #
    #
    # *** DRM_PANIC_SCREEN_QR_CODE   # enable QR code based panic screen!
    #         Depends on: HAS_IOMEM [=y] && DRM [=y] && DRM_PANIC [=y] && RUST [=n]
    #     DRM_PANIC_SCREEN_QR_CODE_URL   # base url
    #     DRM_PANIC_SCREEN_QR_VERSION # smth about size of QR code

    # reference full meta for DRM_PANIC so I can locate it in the menuconfig:
    # │ Symbol: DRM_PANIC [=n]
    # │ Type  : bool
    # │ Defined at drivers/gpu/drm/Kconfig:108
    # │   Prompt: Display a user-friendly message when a kernel panic occurs
    # │   Depends on: HAS_IOMEM [=y] && DRM [=y]
    # │   Location:
    # │     -> Device Drivers
    # │       -> Graphics support
    # │         -> Direct Rendering Manager (XFree86 4.1.0 and higher DRI support) (DRM [=y])
    # │ (4)       -> Display a user-friendly message when a kernel panic occurs (DRM_PANIC [=n])
    # │ Selects: FONT_SUPPORT [=y]

    # TODO Next step... try a diff hypervisor and/or my desktop dual boot
    #

    # - linux-next found: https://www.kernel.org/
    #   => git.kernel.org
    #   => https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git/
    #   => cloned this git tree (repo) and found qrcode in the code that was close to article's patch code
    #   https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git/tag/?h=next-20240830

    # -- attempting QR code panic screens... will require rust?
    #  => https://www.phoronix.com/news/Linux-6.12-DRM-Panic-QR-Code
    # copied to `linux-next-qr-code` dir in my VM (whole copy of entire linux next src from initial panic screen compiled kernel ... hopefully not too expensive to mod for qr code screen and recompile minimal stuff?)
    #    EXTRAVERSION = -qrcodewes
    # make menuconfig
    #  menu entires for QR_CODE not showing, IIAC b/c I did not yet enable RUST
    #  / RUST => shows where
    #      RUST_IS_AVAILABLE [=n]  # IIGC b/c rust tooling is missing on host?
    #  Install RUST: https://www.rust-lang.org/tools/install
    #     curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
    #       default install (enter)
    #  verify:
    #    rustc --version && cargo --version
    #  # install RUST
    #    rustup install nightly
    #    rustup default nightly
    #    # chatgpt says nightly needed for linux kernel?
    #
    #   FYI init/Kconfig has RUST_IS_AVAILABLE defined, refers to:
    #     scripts/rust_is_available.sh # run by make rustavailable
    #     Documentation/rust/quick-start.rst
    #     Makefile target 'rustavailable' # use to troubleshoot
    #
    #  make rustavailable
    #    mentions bindings not avail... so lets look at docs instead of chatgpt
    #
    #  Documentation/rust/quick-start.rst
    #    sudo apt install -y rustc rust-src bindgen rustfmt rust-clippy  # shit I should've run  this instead of script above... stop being lazy and look at docs wes
    #       FYI also prebuilt versions: https://kernel.org/pub/tools/llvm/rust/ => "latest LLVM" and "matching LLVM"
    #       or rustup like I started above
    #    TODO install all components in docs yet
    #
    #   make LLVM=1 rustavailable  # check if reqs met ... clang missing
    #
    #   docs => llvm / clang needed:
    #      https://apt.llvm.org/ mentions auto install (of custom llvm repos and packages):
    #         sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
    #
    #       llvm-config --version .... llvm-config-18 binary works
    #       clang --version  .... clang-18 binary works
    #
    #   make rustavailable # now says 'core' std lib missing
    #      rustup component add rust-src  # squashes that warning
    #   make rustavailable => Rust is available!    !!!!
    #      FYI bindings warning about 0.66.1 that has a bug :(... might need new bindings version?
    #
    #   but I need to use `make LLVM=1 ` to use LLVM for the full kernel instead of gcc which is experimental w/ rust support...
    #   make LLVM=1 rustavailable
    #      clang missing... probably b/c I am using -18 version and not the default clang version
    #      this fixed it in make output:
    #        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-18 100
    #        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-18 100
    #        sudo update-alternatives --install /usr/bin/ld.lld ld.lld /usr/bin/ld.lld-18 100
    #
    #  https://docs.kernel.org/rust/quick-start.html  # FYI online docs
    #
    # make LLVM=1 menuconfig   # F YES IT OPENS!
    #  / RUST => shows some options to disable:
    #      !MODVERSIONS => itsw "y" now =>
    #          top level -> Enable loadable module support (disable)
    #      !SHADOW_CALL_STACK => its "y" now =>
    #          General architecture-dependent options => Shadow Call Stack (disable it)
    #
    #    YAYAYYA  => General setup => Rust support at bottom!!!
    #      save it .config yeah!
    # / QR_CODE  => should show now?!
    #   │     -> Device Drivers                                                                                                                │
    #   │       -> Graphics support                                                                                                            │
    #   │         -> Direct Rendering Manager (XFree86 4.1.0 and higher DRI support) (DRM [=y])                                                │
    #   │           -> Display a user-friendly message when a kernel panic occurs (DRM_PANIC [=y])                                             │
    #   │ (1)         -> Add a panic screen with a QR code (DRM_PANIC_SCREEN_QR_CODE [=n])
    #       F YES! THERE IT IS!

    # now for the compiler to choke :)
    # make LLVM=1 -j$(nproc)
    #    missing some more llvm/clang tools b/c binaries are -18
    #    llvm-readelf:
    #     sudo update-alternatives --install /usr/bin/llvm-readelf llvm-readelf /usr/bin/llvm-readelf-18 100
    #    llvm-objcopy
    #    sudo update-alternatives --install /usr/bin/llvm-objcopy llvm-objcopy /usr/bin/llvm-objcopy-18 100
    #     llvm-nm
    #   sudo update-alternatives --install /usr/bin/llvm-nm llvm-nm /usr/bin/llvm-nm-18 100
    #
    # now rust bindings arent working IIUC.. IIGC the bug that is mentioned ?
    #
    # *** Rust bindings generator 'bindgen' versions 0.66.0 and 0.66.1 may not
    # *** work due to a bug (https://github.com/rust-lang/rust-bindgen/pull/2567),
    # *** unless patched (like Debian's).
    # ***   Your version:     0.66.1
    #
    # cargo install --locked bindgen-cli   # installs v0.70.1  ... now how to use this one? woa.. used automatically by make LLVM=1 -j$(nproc)...  cool
    #
    # NOW FOR THE NEXT FAILURE in the goddamn compile...
    #  more missing llvm tools ... NBD
    #     sudo update-alternatives --install /usr/bin/llvm-ar llvm-ar /usr/bin/llvm-ar-18 100
    #    wow its compiling lots of obj files... I am gonna do a little dance if this works!
    #      shit ... arch/arm64/kernel/signal.c:1184:14: error: use of undeclared identifier 'vdso_offset_sigtramp'
    #
    # make clean # forgot to do this since last build
    #   CROSS FINGERS ... build working again... got past buidling arch/arm64/kernel/signal.o !!!!
    #      must've been holdover code generated from prev build
    #
    #  missing
    #      sudo update-alternatives --install /usr/bin/llvm-strip llvm-strip /usr/bin/llvm-strip-18 100
    #      sudo update-alternatives --install /usr/bin/llvm-objdump llvm-objdump /usr/bin/llvm-objdump-18 100
    #   FYI measuring progress by compiled kernel file sizes :) ... 13GB (woa big jump recently)... was slow to about 9GB and then jumped a bit
    #     28 GB was my last build size for the kernel src dir when done
    #     crap smth led to Killed (not sure if I hit ctrl+c maybe in wrong pane or?)... could have corrupted kernel build? who knows...was around `LD vmlinux` linking
    #        no specific error so I re-ran the `make` resumed it  and its working fine so far *crosses fingers*
    #
    # woa finished
    # sudo make modules_install # two lines of output only?! seems wrong # FUUUU FORGOT LLVM=1 DUMBASS wes
    # sudo make install #
    #    GRUB has -qrcodewes kernel as second option... lets just restart and select manually b/c I dont think it will work anyways so I dont wanna bork my VM in case
    #   show grub menu (not showing)
    #     sudo sed -i 's/^GRUB_TIMEOUT=.*/GRUB_TIMEOUT=10/' /etc/default/grub
    #     sudo sed -i 's/^GRUB_TIMEOUT_STYLE=.*/GRUB_TIMEOUT_STYLE=menu/' /etc/default/grub
    #        was hidden, should now show
    #        NOT SURE I NEEDED THIS, I wasn't using vnc to the display...
    #  BTW esc on startup (with virsh console interface) => shows BIOS for qemu VM
    #  SHIT VT Console is not the spot to find grub menu! derp wes
    #  lol ok new kernel fails to boot! as if it didn't even start...
    #    lets do clean!!!
    #
    # make clean # and recompile....
    # OMFG... I just realized I did not use `make LLVM=1` FUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU
    # wait... did I need make LLVM=1 clean?! FUUUU2
    #
    # sudo make LLVM=1 -j$(nproc)    # I think llvm is compiling faster than gcc... TBD... maybe run a perf test later on (overnight tests) to see total time LLVM vs GCC on entire kernel
    #   echo $?  # 0 !!! yay
    # sudo make LLVM=1 modules_install
    #     # only two :( ... seems like modules_install isn't actually working?
    #     INSTALL /lib/modules/6.11.0-qrcodewes-next-20240830/modules.builtin
    #     INSTALL /lib/modules/6.11.0-qrcodewes-next-20240830/modules.builtin.modinfo
    # sudo make LLVM=1 install
    #     zstd: error 70 : Write error : cannot write block : No space left on device
    #       was space on /boot that ran out so I nuked all qrcodewes kernels and files and re-ran make install and it worked
    # OMG reboot and pick grub menu entry over VNC (then virsh console was attached and showed logs booting up!!!...  worked but vnc isn't showing anything... interesting)
    #    I logged in, lets try it
    #     cannot use test DRM panic... but
    #       echo c > /proc/sysrq-trigger # shows black screen! NOT QR CODE... do I need special panic scenario for a QR code to work?!
    # I still think the modules are not fully installed... and that might explain the vnc display not showing login screen after initial boot (does show grub boot loader)
    #         there were some modprobe errors in VT console logs... until I:
    #         I went ahead and nuked the /lib/modules/...qrcodewes... modules dir and re-installed it (sudo LLVM=1 make modules_install) and it had fewer files (2 only) and now on boot I don't see erorrs from modprobe like I did before'
    #         I think it had old files from my first attempts w/o LLVM=1...
    #             I diff'd the old and new dir and saw that there are other files so yeah good to remove
    #
    # ... wait ok
    # sudo ls /sys/kernel/debug/dri/ has 0,1,2 folders now... 3 of them (1/2 not there before)
    #     /sys/kernel/debug/dri/2 has drm_panic_plane_0
    #   I WONDER IF VNC is connecting to a display that is one of these others or somehow not normally used... I bet that is why it shows panic screen but not login too?
    #   lets try panic
    #      echo 1 > /sys/kernel/debug/dri/2/drm_panic_plane_0
    #        ***  works, but no QR code :(
    #           My guess is I don't have a panic scneario that has a configured QR Code?'
    #  this article shows sysrq triggered crash w/ QR Code... :( https://www.phoronix.com/news/Linux-DRM-Panic-QR-Codes
    #      do I need the URL set too?
    #
    # *** gonna set BASEURL and see if it works, logic differs w and w/o
    #     CONFIG_DRM_PANIC_SCREEN_QR_CODE_URL="https://example.com/"
    #
    #     btw impl is here: https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next/blob/985bf40edf4343dcb04c33f58b40b4a85c1776d4/drivers/gpu/drm/drm_panic.c#L704
    #
    #     sudo make LLVM=1 -j$(nproc)  # cross fingers I can just rebuild w/o clean (which FYI worked w/ blue screen BG color change)
    #     sudo make LLVM=1 modules_install
    #     clean up /booot since space is low
    #           sudo rm /boot/*qrcodewes*
    #     sudo make LLVM=1 install
    #     sudo reboot
    #         cat /boot/config*qrcodewes* | grep URL # confirm
    #  STILL NO QR CODE screen :( ... only guess is that multiple DRI devices mean I am looking at one that isn't the QR code one OR is it possible simpledrm doesn't work with QR codes?
    #
    # change to blue just to see if it works
    #    sed -i 's/^CONFIG_DRM_PANIC_BACKGROUND_COLOR=.*/CONFIG_DRM_PANIC_BACKGROUND_COLOR=0x0000ff/' .config
    #   make LLVM ... # reboot # works! blue background but not a QR code :(
    #     STILL  ODD THAT vnc doesn't show the login screen... I suspect smth is off with vnc connection... lets see if I can see the other DRI devices
    #
    #  is resolution an issue? or am I connecting to wrong display with VNC?
    #

    # build13 bg color change test
    # vim Makefile
    #   EXTRAVERSION = -bluescreen
    #     was -rc5 before # need to fully reinstall so this becomes separte /boot/ kernel ... and /lib/modules/...-bluescreen... now!
    # CONFIG_DRM_PANIC_BACKGROUND_COLOR=0x0000ff # set to BLUE bg
    # left FG default: CONFIG_DRM_PANIC_FOREGROUND_COLOR=0xffffff
    # make -j$(nproc)
    # sudo make modules_install
    # sudo make install
    #  ensure new kernel is first in grub bootloader? and reboot!
    #     not... need to pick it or leave bootloader up a second?
    # need to get grub menu to show
    #     https://www.gnu.org/software/grub/manual/grub/html_node/timeout.html
    #   sudo grep TIMEOUT /etc/default/grub
    #     GRUB_TIMEOUT=10
    #     GRUB_TIMEOUT_STYLE=hidden
    #      ok set menu
    #        sudo sed -i 's/^GRUB_TIMEOUT_STYLE=.*/GRUB_TIMEOUT_STYLE=menu/' /etc/default/grub
    #        sudo update-grub
    #          WORKED TO PICK FROM MENU and then BSOD worked!
    #  BLUE PANIC SCREEN worked!

    # *** CLEANUP TODOs  => drop CMDLINE args on build13 so not blocking nouveau display driver
    #    if QR Code build works in VM, I wanna compile it for my build13 too and then make build13 my custom kernel testing box and daily driver for custom kernel stuffs


    ## panic src review
    #   CONFIG_LOGO   # can logo be set? looks like a bitmap or some graphics
    #       uses this instead of tux IIUC => https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next/blob/985bf40edf4343dcb04c33f58b40b4a85c1776d4/drivers/gpu/drm/drm_panic.c#L516
    #

    # see script files now
    #

  end

end
